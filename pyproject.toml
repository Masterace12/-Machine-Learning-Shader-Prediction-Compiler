[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "shader-predict-compile"
version = "2.0.0"
authors = [
    {name = "ML Shader Team", email = "info@shader-predict-compile.org"},
]
description = "AI-powered shader compilation optimization for Steam Deck and Linux gaming"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: X11 Applications",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Games/Entertainment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Hardware",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
keywords = [
    "steam-deck",
    "shader-compilation",
    "machine-learning",
    "gaming-performance",
    "thermal-management",
    "gpu-optimization",
    "vulkan",
    "proton",
    "steamos",
]
dependencies = [
    # Core ML dependencies
    "numpy>=1.20.0,<3.0.0",
    "scikit-learn>=1.0.0,<2.0.0",
    "lightgbm>=3.0.0,<5.0.0",
    
    # System integration
    "psutil>=5.8.0,<7.0.0",
    "requests>=2.25.0,<3.0.0",
    
    # Performance optimizations
    "numba>=0.56.0,<1.0.0",
    "msgpack>=1.0.0,<2.0.0",
    "zstandard>=0.20.0,<1.0.0",
    "numexpr>=2.8.0,<3.0.0",
    "bottleneck>=1.3.0,<2.0.0",
    
    # Data validation and async I/O
    "pydantic>=1.10.0,<3.0.0",
    "aiofiles>=0.8.0,<24.0.0",
    
    # Linux-specific
    "distro>=1.6.0,<2.0.0",
]

# Platform-specific dependencies need special handling
# Note: dbus-next is installed conditionally via requirements.txt for Linux systems

[project.optional-dependencies]
linux = [
    "dbus-next>=0.2.0,<1.0.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.20.0",
    "pytest-mock>=3.10.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.0.260",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "memray>=1.6.0",
]
testing = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.20.0",
    "pytest-mock>=3.10.0",
    "pytest-benchmark>=4.0.0",
]
security = [
    "bandit>=1.7.0",
    "safety>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/user/shader-predict-compile"
Documentation = "https://github.com/user/shader-predict-compile/wiki"
Repository = "https://github.com/user/shader-predict-compile.git"
"Bug Reports" = "https://github.com/user/shader-predict-compile/issues"
"Discussions" = "https://github.com/user/shader-predict-compile/discussions"
"Steam Deck Community" = "https://reddit.com/r/SteamDeck"

[project.scripts]
shader-predict-compile = "src.main:main"
shader-predict-status = "src.monitoring.performance_monitor:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yml", "*.yaml"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "lightgbm.*",
    "psutil.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "steamdeck: marks tests that require Steam Deck hardware or simulation",
    "security: marks security-related tests",
    "performance: marks performance benchmark tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "pass",
]

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]  # Skip assert_used and shell=True warnings for specific use cases