#!/bin/bash
# ML Shader Predictor - Main launcher script
# Provides unified interface for all ML Shader Predictor functionality

set -euo pipefail

# Script directory and install directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
INSTALL_DIR="$(dirname "$SCRIPT_DIR")"
SRC_DIR="$INSTALL_DIR/src"

# Configuration
PYTHON_PATH="$INSTALL_DIR/venv/bin/python"
CONFIG_DIR="$HOME/.config/ml-shader-predictor"
LOG_DIR="$HOME/.local/share/ml-shader-predictor/logs"

# Ensure directories exist
mkdir -p "$CONFIG_DIR" "$LOG_DIR"

# Function to check if we're on Steam Deck
is_steam_deck() {
    [ -f "/sys/devices/virtual/dmi/id/board_name" ] && \
    grep -q "Jupiter\|Galileo" /sys/devices/virtual/dmi/id/board_name 2>/dev/null
}

# Function to check if we're in Gaming Mode
is_gaming_mode() {
    pgrep -x gamescope >/dev/null 2>&1
}

# Function to show help
show_help() {
    cat << EOF
ML Shader Predictor - Machine Learning Shader Prediction Compiler

USAGE:
    ml-shader-predictor [OPTIONS] [COMMAND] [ARGS...]

OPTIONS:
    -h, --help          Show this help message
    -v, --version       Show version information
    -q, --quiet         Suppress output messages
    -d, --debug         Enable debug output
    --config DIR        Use custom configuration directory

COMMANDS:
    gui                 Launch graphical interface
    service             Manage background service
    optimize            Optimize shaders for specific games
    cache               Manage shader cache
    monitor             Show performance monitoring
    configure           Interactive configuration
    install             Install system integration
    uninstall           Remove system integration

SERVICE COMMANDS:
    service start       Start background service
    service stop        Stop background service  
    service restart     Restart background service
    service status      Show service status

CACHE COMMANDS:
    cache list          List cached shader data
    cache clear [ID]    Clear cache (all or specific game)
    cache optimize      Optimize cache storage
    cache validate      Validate cache integrity

OPTIMIZE COMMANDS:
    optimize game ID    Optimize shaders for specific Steam game ID
    optimize auto       Enable automatic optimization
    optimize manual     Disable automatic optimization

EXAMPLES:
    ml-shader-predictor gui
    ml-shader-predictor service start
    ml-shader-predictor optimize game 1091500
    ml-shader-predictor cache list

For Steam Deck users, the GUI will automatically adapt to Gaming Mode.
EOF
}

# Function to show version
show_version() {
    echo "ML Shader Predictor v1.0.0"
    echo "Machine Learning Shader Prediction Compiler for Steam Deck"
    echo "Copyright (c) 2024 - Licensed under MIT"
}

# Function to log messages
log_message() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    if [ "$QUIET" != "true" ]; then
        echo "[$timestamp] [$level] $message" >&2
    fi
    
    echo "[$timestamp] [$level] $message" >> "$LOG_DIR/ml-shader-predictor.log"
}

# Function to check dependencies
check_dependencies() {
    local missing_deps=()
    
    # Check Python
    if [ ! -f "$PYTHON_PATH" ]; then
        missing_deps+=("python-venv")
    fi
    
    # Check required Python modules
    if ! "$PYTHON_PATH" -c "import tkinter" 2>/dev/null; then
        missing_deps+=("python3-tk")
    fi
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        log_message "ERROR" "Missing dependencies: ${missing_deps[*]}"
        echo "Please install missing dependencies and run the installer again."
        exit 1
    fi
}

# Function to launch GUI
launch_gui() {
    log_message "INFO" "Launching ML Shader Predictor GUI"
    
    # Check if we should use gaming mode UI
    local ui_args=()
    if is_steam_deck && is_gaming_mode; then
        ui_args+=(--ui-mode gaming)
        log_message "INFO" "Using Gaming Mode UI"
    fi
    
    exec "$PYTHON_PATH" "$SRC_DIR/ml_shader_predictor_gui.py" "${ui_args[@]}"
}

# Function to manage service
manage_service() {
    local action="$1"
    
    case "$action" in
        start)
            log_message "INFO" "Starting ML Shader Predictor service"
            if pgrep -f "shader_prediction_system.py" >/dev/null; then
                echo "Service is already running"
                exit 0
            fi
            
            "$PYTHON_PATH" "$SRC_DIR/shader_prediction_system.py" --service --background &
            local pid=$!
            echo $pid > "$CONFIG_DIR/service.pid"
            echo "Service started with PID: $pid"
            ;;
        
        stop)
            log_message "INFO" "Stopping ML Shader Predictor service"
            if [ -f "$CONFIG_DIR/service.pid" ]; then
                local pid=$(cat "$CONFIG_DIR/service.pid")
                if kill "$pid" 2>/dev/null; then
                    echo "Service stopped"
                else
                    echo "Service was not running"
                fi
                rm -f "$CONFIG_DIR/service.pid"
            else
                pkill -f "shader_prediction_system.py" || echo "Service was not running"
            fi
            ;;
        
        restart)
            manage_service stop
            sleep 2
            manage_service start
            ;;
        
        status)
            if pgrep -f "shader_prediction_system.py" >/dev/null; then
                local pid=$(pgrep -f "shader_prediction_system.py")
                echo "Service is running (PID: $pid)"
                
                # Show service statistics if available
                if [ -f "$CONFIG_DIR/service_stats.json" ]; then
                    echo "Service statistics:"
                    cat "$CONFIG_DIR/service_stats.json" | \
                        "$PYTHON_PATH" -m json.tool 2>/dev/null || echo "Statistics unavailable"
                fi
            else
                echo "Service is not running"
                exit 1
            fi
            ;;
        
        *)
            echo "Unknown service command: $action"
            echo "Available commands: start, stop, restart, status"
            exit 1
            ;;
    esac
}

# Function to manage shader cache
manage_cache() {
    local action="$1"
    shift
    
    case "$action" in
        list)
            log_message "INFO" "Listing shader cache"
            "$PYTHON_PATH" "$SRC_DIR/shader_cache_manager.py" --list
            ;;
        
        clear)
            local target="${1:-all}"
            log_message "INFO" "Clearing shader cache: $target"
            
            if [ "$target" = "all" ]; then
                read -p "Are you sure you want to clear ALL shader cache? (y/N): " -n 1 -r
                echo
                if [[ $REPLY =~ ^[Yy]$ ]]; then
                    "$PYTHON_PATH" "$SRC_DIR/shader_cache_manager.py" --clear-all
                fi
            else
                "$PYTHON_PATH" "$SRC_DIR/shader_cache_manager.py" --clear "$target"
            fi
            ;;
        
        optimize)
            log_message "INFO" "Optimizing shader cache"
            "$PYTHON_PATH" "$SRC_DIR/shader_cache_manager.py" --optimize
            ;;
        
        validate)
            log_message "INFO" "Validating shader cache"
            "$PYTHON_PATH" "$SRC_DIR/shader_cache_validator.py" --validate-all
            ;;
        
        *)
            echo "Unknown cache command: $action"
            echo "Available commands: list, clear [ID], optimize, validate"
            exit 1
            ;;
    esac
}

# Function to optimize shaders
optimize_shaders() {
    local mode="$1"
    shift
    
    case "$mode" in
        game)
            local game_id="$1"
            log_message "INFO" "Optimizing shaders for game ID: $game_id"
            "$PYTHON_PATH" "$SRC_DIR/shader_prediction_system.py" --optimize-game "$game_id"
            ;;
        
        auto)
            log_message "INFO" "Enabling automatic optimization"
            "$PYTHON_PATH" "$SRC_DIR/shader_prediction_system.py" --enable-auto-optimization
            ;;
        
        manual)
            log_message "INFO" "Disabling automatic optimization" 
            "$PYTHON_PATH" "$SRC_DIR/shader_prediction_system.py" --disable-auto-optimization
            ;;
        
        *)
            echo "Unknown optimize command: $mode"
            echo "Available commands: game ID, auto, manual"
            exit 1
            ;;
    esac
}

# Function to show performance monitor
show_monitor() {
    log_message "INFO" "Starting performance monitor"
    "$PYTHON_PATH" "$SRC_DIR/performance_monitor.py" --interactive
}

# Function to run configuration
run_configure() {
    log_message "INFO" "Starting interactive configuration"
    "$PYTHON_PATH" "$SRC_DIR/configurator.py" --interactive
}

# Function to install system integration
install_integration() {
    log_message "INFO" "Installing system integration"
    "$PYTHON_PATH" "$SRC_DIR/desktop_integration.py" --install
    
    if is_steam_deck; then
        "$PYTHON_PATH" "$SRC_DIR/gaming_mode_integration.py" --install
    fi
    
    echo "System integration installed successfully"
}

# Function to uninstall system integration
uninstall_integration() {
    log_message "INFO" "Removing system integration"
    "$PYTHON_PATH" "$SRC_DIR/desktop_integration.py" --uninstall
    
    if is_steam_deck; then
        "$PYTHON_PATH" "$SRC_DIR/gaming_mode_integration.py" --uninstall
    fi
    
    echo "System integration removed successfully"
}

# Parse command line arguments
QUIET="false"
DEBUG="false"
CUSTOM_CONFIG=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--version)
            show_version
            exit 0
            ;;
        -q|--quiet)
            QUIET="true"
            shift
            ;;
        -d|--debug)
            DEBUG="true"
            shift
            ;;
        --config)
            CUSTOM_CONFIG="$2"
            shift 2
            ;;
        *)
            break
            ;;
    esac
done

# Use custom config directory if specified
if [ -n "$CUSTOM_CONFIG" ]; then
    CONFIG_DIR="$CUSTOM_CONFIG"
    mkdir -p "$CONFIG_DIR"
fi

# Enable debug logging if requested
if [ "$DEBUG" = "true" ]; then
    set -x
    export ML_SHADER_PREDICTOR_DEBUG=1
fi

# Check dependencies before running commands
check_dependencies

# Handle commands
if [ $# -eq 0 ]; then
    # No command provided - launch GUI by default
    launch_gui
else
    command="$1"
    shift
    
    case "$command" in
        gui)
            launch_gui
            ;;
        service)
            if [ $# -eq 0 ]; then
                echo "Service command requires an action: start, stop, restart, status"
                exit 1
            fi
            manage_service "$1"
            ;;
        optimize)
            if [ $# -eq 0 ]; then
                echo "Optimize command requires a mode: game, auto, manual"
                exit 1
            fi
            optimize_shaders "$@"
            ;;
        cache)
            if [ $# -eq 0 ]; then
                echo "Cache command requires an action: list, clear, optimize, validate"
                exit 1
            fi
            manage_cache "$@"
            ;;
        monitor)
            show_monitor
            ;;
        configure)
            run_configure
            ;;
        install)
            install_integration
            ;;
        uninstall)
            uninstall_integration
            ;;
        *)
            echo "Unknown command: $command"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
fi